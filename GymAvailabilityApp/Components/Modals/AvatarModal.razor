@inject IBlobStorageService BlobService
@inject IModalService ModalService
<ModalHeader>
    <ModalTitle>Edit Avatar</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    With a photo, others will be able to recognize you, and you will know that you are logged into your account
    @if (doesImageExistRemotely(GetAvatarPath(@User)))
    {
       <Container>
            <img src="@GetAvatarPath(@User)" class="rounded-circle shadow-4" style="width: 250px;">
       </Container> 

    }
    else 
    {
        <img src="https://mdbcdn.b-cdn.net/img/new/avatars/1.webp" class="rounded-circle shadow-4"
             style="width: 250x;" alt="Avatar" /> 
    }
    
    <Button Color="Color.Primary" Clicked="ShowAddingImageDialog" Block>Add your Avatar</Button>
@if (addingImageDialog)
    {
        <Field>
            <FilePicker Filter="image/png" Upload="OnFileUpload" ShowMode="FilePickerShowMode.List" />
        </Field>
        
    }


</ModalBody>
<ModalFooter>
    <Button Color="Color.Danger" Clicked="Close">Close</Button>
</ModalFooter>
@code {

    [Parameter] public string User { get; set; }

    private async Task Close()
    {
        await ModalService.Hide();
    }

    private async Task Save()
    {
        await ModalService.Hide();
    }
    public string GetAvatarPath(string userName)
    {
        return "https://gymavaiability.blob.core.windows.net/avatars/" + userName + ".png";
    }
    public bool addingImageDialog = false;
    public void ShowAddingImageDialog()
    {
        addingImageDialog = true;
    }

    public bool doesImageExistRemotely(string uriToImage)
    {
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uriToImage);
        request.Method = "HEAD";

        try
        {
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();

            if (response.StatusCode == HttpStatusCode.OK)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            return false;
        }
    }
    async Task OnFileUpload(FileUploadEventArgs e)
    {
        try
        {
            string fileName = User + ".png";
            var blobUrl = await BlobService.UploadFileToBlobAsync(fileName, e.File.Type, e.File.OpenReadStream(long.MaxValue), "avatars");

        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}